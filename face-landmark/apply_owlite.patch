diff --git a/lib/test.py b/lib/test.py
index 6668734..fe65148 100644
--- a/lib/test.py
+++ b/lib/test.py
@@ -1,5 +1,6 @@
 import cv2, os
 import sys
+import owlite
 sys.path.insert(0, '..')
 import numpy as np
 from PIL import Image
@@ -8,6 +9,7 @@ import pickle
 import importlib
 from math import floor
 import time
+import argparse
 
 import torch
 import torch.nn as nn
@@ -23,14 +25,38 @@ import data_utils
 from functions import *
 from mobilenetv3 import mobilenetv3_large
 
-if not len(sys.argv) == 4:
-    print('Format:')
-    print('python lib/test.py config_file test_labels test_images')
-    exit(0)
-experiment_name = sys.argv[1].split('/')[-1][:-3]
-data_name = sys.argv[1].split('/')[-2]
-test_labels = sys.argv[2]
-test_images = sys.argv[3]
+parser = argparse.ArgumentParser(description='PIPNet Test')
+parser.add_argument('--cfg-file', type=str, help='Configuration file for PIPNet')
+parser.add_argument('--test-labels', type=str, default='test.txt', help='Label file of test dataset')
+parser.add_argument('--test-images', type=str, default='images_test', help='Test dataset folder')
+parser.add_argument('--calib-labels', type=str, default='train.txt', help='Label file of calibration dataset')
+parser.add_argument('--calib-images', type=str, default='images_train', help='Calibration dataset folder')
+
+# Add OwLite arguments
+subparsers = parser.add_subparsers(required=True)
+owlite_parser = subparsers.add_parser("owlite", help="Owlite arguments")
+owlite_parser.add_argument('--project', type=str, required=True, 
+                           dest="owlite_project", help="Owlite project name")
+owlite_parser.add_argument('--baseline', type=str, required=True, 
+                           dest="owlite_baseline", help="Owlite baseline name")
+owlite_parser.add_argument('--experiment', type=str, default=None, 
+                           dest="owlite_experiment", help="Owlite experiment name")
+owlite_parser.add_argument('--duplicate-from', type=str, default=None, 
+                           dest="owlite_duplicate_from", 
+                           help="The name of Owlite experiment "
+                                "where the config to be duplicated is located")
+owlite_parser.add_argument('--ptq', action="store_true", 
+                           dest="owlite_ptq", help="True if Owlite PTQ is applied")
+owlite_parser.add_argument('--calib-num', type=int, default=256, 
+                           dest="owlite_calib_num", 
+                           help="Number of data to use for Owlite calibration")
+args = parser.parse_args()
+
+experiment_name = args.cfg_file.split('/')[-1][:-3]
+data_name = args.cfg_file.split('/')[-2]
+test_labels = args.test_labels
+test_images = args.test_images
+
 config_path = '.experiments.{}.{}'.format(data_name, experiment_name)
 
 my_config = importlib.import_module(config_path, package='PIPNet')
@@ -95,17 +121,26 @@ normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                  std=[0.229, 0.224, 0.225])
 preprocess = transforms.Compose([transforms.Resize((cfg.input_size, cfg.input_size)), transforms.ToTensor(), normalize])
 
-norm_indices = None
+norm_indices, points_flip = None, None
 if cfg.data_name == 'data_300W' or cfg.data_name == 'data_300W_COFW_WFLW' or cfg.data_name == 'data_300W_CELEBA':
     norm_indices = [36, 45]
+    points_flip = [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 28, 29, 30, 31, 36, 35, 34, 33, 32, 46, 45, 44, 43, 48, 47, 40, 39, 38, 37, 42, 41, 55, 54, 53, 52, 51, 50, 49, 60, 59, 58, 57, 56, 65, 64, 63, 62, 61, 68, 67, 66]
+    points_flip = (np.array(points_flip)-1).tolist()
 elif cfg.data_name == 'COFW':
     norm_indices = [8, 9]
+    points_flip = [2, 1, 4, 3, 7, 8, 5, 6, 10, 9, 12, 11, 15, 16, 13, 14, 18, 17, 20, 19, 21, 22, 24, 23, 25, 26, 27, 28, 29]
+    points_flip = (np.array(points_flip)-1).tolist()
 elif cfg.data_name == 'WFLW':
     norm_indices = [60, 72]
+    points_flip = [32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 46, 45, 44, 43, 42, 50, 49, 48, 47, 37, 36, 35, 34, 33, 41, 40, 39, 38, 51, 52, 53, 54, 59, 58, 57, 56, 55, 72, 71, 70, 69, 68, 75, 74, 73, 64, 63, 62, 61, 60, 67, 66, 65, 82, 81, 80, 79, 78, 77, 76, 87, 86, 85, 84, 83, 92, 91, 90, 89, 88, 95, 94, 93, 97, 96]
 elif cfg.data_name == 'AFLW':
+    points_flip = [6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 15, 14, 13, 18, 17, 16, 19]
+    points_flip = (np.array(points_flip)-1).tolist()
     pass
 elif cfg.data_name == 'LaPa':
     norm_indices = [66, 79]
+    points_flip = [33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 47, 46, 45, 44, 43, 51, 50, 49, 48, 38, 37, 36, 35, 34, 42, 41, 40, 39, 52, 53, 54, 55, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 80, 79, 78, 77, 76, 83, 82, 81, 84, 71, 70, 69, 68, 67, 74, 73, 72, 75, 91, 90, 89, 88, 87, 86, 85, 96, 95, 94, 93, 92, 101, 100, 99, 98, 97, 104, 103, 102, 106, 105]
+    points_flip = (np.array(points_flip)-1).tolist()
 else:
     print('No such data!')
     exit(0)
@@ -116,6 +151,29 @@ nmes_std = []
 nmes_merge = []
 norm = None
 time_all = 0
+owl = owlite.init(
+    args.owlite_project,
+    args.owlite_baseline,
+    args.owlite_experiment,
+    args.owlite_duplicate_from
+)
+net = owl.convert(net, torch.randn(cfg.batch_size, 3, cfg.input_size, cfg.input_size).to(device))
+
+if args.owlite_ptq:
+    calib_data = data_utils.ImageFolder_pip(os.path.join('data', cfg.data_name, args.calib_images), 
+                                              get_label(cfg.data_name, args.calib_labels), cfg.input_size, cfg.num_lms, 
+                                              cfg.net_stride, points_flip, meanface_indices,
+                                              transforms.Compose(
+                                              [transforms.ToTensor(),
+                                              normalize]))
+    calib_loader = torch.utils.data.DataLoader(calib_data, batch_size=cfg.batch_size, shuffle=True, num_workers=8, pin_memory=True, drop_last=True)
+
+    with owlite.calibrate(net) as calibrate_model:
+        for idx, data in enumerate(calib_loader):
+            if idx > 0 and idx >= args.owlite_calib_num // cfg.batch_size:
+                break
+            calibrate_model(data[0].to(device))
+
 for label in labels:
     image_name = label[0]
     lms_gt = label[1]
@@ -169,3 +227,6 @@ if cfg.det_head == 'pip':
     logging.info('fr : {}'.format(fr))
     print('auc: {}'.format(auc))
     logging.info('auc: {}'.format(auc))
+    owl.export(net)
+    owl.benchmark()
+    owl.log(auc=auc)
\ No newline at end of file
